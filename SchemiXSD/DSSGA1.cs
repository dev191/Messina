//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2407
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TheSite.SchemiXSD
{
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;


    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DsSGA : DataSet
    {

        private sgaDataTable tablesga;

        public DsSGA()
        {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }

        protected DsSGA(SerializationInfo info, StreamingContext context)
        {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null))
            {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["sga"] != null))
                {
                    this.Tables.Add(new sgaDataTable(ds.Tables["sga"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }

        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sgaDataTable sga
        {
            get
            {
                return this.tablesga;
            }
        }

        public override DataSet Clone()
        {
            DsSGA cln = ((DsSGA)(base.Clone()));
            cln.InitVars();
            return cln;
        }

        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        protected override void ReadXmlSerializable(XmlReader reader)
        {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["sga"] != null))
            {
                this.Tables.Add(new sgaDataTable(ds.Tables["sga"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }

        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }

        internal void InitVars()
        {
            this.tablesga = ((sgaDataTable)(this.Tables["sga"]));
            if ((this.tablesga != null))
            {
                this.tablesga.InitVars();
            }
        }

        private void InitClass()
        {
            this.DataSetName = "DsSGA";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DSSGA1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablesga = new sgaDataTable();
            this.Tables.Add(this.tablesga);
        }

        private bool ShouldSerializesga()
        {
            return false;
        }

        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
        {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove))
            {
                this.InitVars();
            }
        }

        public delegate void sgaRowChangeEventHandler(object sender, sgaRowChangeEvent e);

        [System.Diagnostics.DebuggerStepThrough()]
        public class sgaDataTable : DataTable, System.Collections.IEnumerable
        {

            private DataColumn columnrdl;

            private DataColumn columnsga;

            private DataColumn columndata_richiesta;

            private DataColumn columnedificio;

            private DataColumn columnpiano;

            private DataColumn columnstanza;

            private DataColumn columnservizio;

            private DataColumn columnrichiedente;

            private DataColumn columntipomanutenzione;

            private DataColumn columnurgenza;

            private DataColumn columnstato_rdl;

            private DataColumn columndescrizione_problema;

            internal sgaDataTable() :
                    base("sga")
            {
                this.InitClass();
            }

            internal sgaDataTable(DataTable table) :
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }

            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            internal DataColumn rdlColumn
            {
                get
                {
                    return this.columnrdl;
                }
            }

            internal DataColumn sgaColumn
            {
                get
                {
                    return this.columnsga;
                }
            }

            internal DataColumn data_richiestaColumn
            {
                get
                {
                    return this.columndata_richiesta;
                }
            }

            internal DataColumn edificioColumn
            {
                get
                {
                    return this.columnedificio;
                }
            }

            internal DataColumn pianoColumn
            {
                get
                {
                    return this.columnpiano;
                }
            }

            internal DataColumn stanzaColumn
            {
                get
                {
                    return this.columnstanza;
                }
            }

            internal DataColumn servizioColumn
            {
                get
                {
                    return this.columnservizio;
                }
            }

            internal DataColumn richiedenteColumn
            {
                get
                {
                    return this.columnrichiedente;
                }
            }

            internal DataColumn tipomanutenzioneColumn
            {
                get
                {
                    return this.columntipomanutenzione;
                }
            }

            internal DataColumn urgenzaColumn
            {
                get
                {
                    return this.columnurgenza;
                }
            }

            internal DataColumn stato_rdlColumn
            {
                get
                {
                    return this.columnstato_rdl;
                }
            }

            internal DataColumn descrizione_problemaColumn
            {
                get
                {
                    return this.columndescrizione_problema;
                }
            }

            public sgaRow this[int index]
            {
                get
                {
                    return ((sgaRow)(this.Rows[index]));
                }
            }

            public event sgaRowChangeEventHandler sgaRowChanged;

            public event sgaRowChangeEventHandler sgaRowChanging;

            public event sgaRowChangeEventHandler sgaRowDeleted;

            public event sgaRowChangeEventHandler sgaRowDeleting;

            public void AddsgaRow(sgaRow row)
            {
                this.Rows.Add(row);
            }

            public sgaRow AddsgaRow(long rdl, string sga, string data_richiesta, string edificio, string piano, string stanza, string servizio, string richiedente, string tipomanutenzione, string urgenza, string stato_rdl, string descrizione_problema)
            {
                sgaRow rowsgaRow = ((sgaRow)(this.NewRow()));
                rowsgaRow.ItemArray = new object[] {
                        rdl,
                        sga,
                        data_richiesta,
                        edificio,
                        piano,
                        stanza,
                        servizio,
                        richiedente,
                        tipomanutenzione,
                        urgenza,
                        stato_rdl,
                        descrizione_problema};
                this.Rows.Add(rowsgaRow);
                return rowsgaRow;
            }

            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            public override DataTable Clone()
            {
                sgaDataTable cln = ((sgaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            protected override DataTable CreateInstance()
            {
                return new sgaDataTable();
            }

            internal void InitVars()
            {
                this.columnrdl = this.Columns["rdl"];
                this.columnsga = this.Columns["sga"];
                this.columndata_richiesta = this.Columns["data_richiesta"];
                this.columnedificio = this.Columns["edificio"];
                this.columnpiano = this.Columns["piano"];
                this.columnstanza = this.Columns["stanza"];
                this.columnservizio = this.Columns["servizio"];
                this.columnrichiedente = this.Columns["richiedente"];
                this.columntipomanutenzione = this.Columns["tipomanutenzione"];
                this.columnurgenza = this.Columns["urgenza"];
                this.columnstato_rdl = this.Columns["stato_rdl"];
                this.columndescrizione_problema = this.Columns["descrizione_problema"];
            }

            private void InitClass()
            {
                this.columnrdl = new DataColumn("rdl", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrdl);
                this.columnsga = new DataColumn("sga", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsga);
                this.columndata_richiesta = new DataColumn("data_richiesta", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndata_richiesta);
                this.columnedificio = new DataColumn("edificio", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnedificio);
                this.columnpiano = new DataColumn("piano", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpiano);
                this.columnstanza = new DataColumn("stanza", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstanza);
                this.columnservizio = new DataColumn("servizio", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnservizio);
                this.columnrichiedente = new DataColumn("richiedente", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrichiedente);
                this.columntipomanutenzione = new DataColumn("tipomanutenzione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntipomanutenzione);
                this.columnurgenza = new DataColumn("urgenza", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnurgenza);
                this.columnstato_rdl = new DataColumn("stato_rdl", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstato_rdl);
                this.columndescrizione_problema = new DataColumn("descrizione_problema", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescrizione_problema);
            }

            public sgaRow NewsgaRow()
            {
                return ((sgaRow)(this.NewRow()));
            }

            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new sgaRow(builder);
            }

            protected override System.Type GetRowType()
            {
                return typeof(sgaRow);
            }

            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.sgaRowChanged != null))
                {
                    this.sgaRowChanged(this, new sgaRowChangeEvent(((sgaRow)(e.Row)), e.Action));
                }
            }

            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.sgaRowChanging != null))
                {
                    this.sgaRowChanging(this, new sgaRowChangeEvent(((sgaRow)(e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.sgaRowDeleted != null))
                {
                    this.sgaRowDeleted(this, new sgaRowChangeEvent(((sgaRow)(e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.sgaRowDeleting != null))
                {
                    this.sgaRowDeleting(this, new sgaRowChangeEvent(((sgaRow)(e.Row)), e.Action));
                }
            }

            public void RemovesgaRow(sgaRow row)
            {
                this.Rows.Remove(row);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        public class sgaRow : DataRow
        {

            private sgaDataTable tablesga;

            internal sgaRow(DataRowBuilder rb) :
                    base(rb)
            {
                this.tablesga = ((sgaDataTable)(this.Table));
            }

            public long rdl
            {
                get
                {
                    try
                    {
                        return ((long)(this[this.tablesga.rdlColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablesga.rdlColumn] = value;
                }
            }

            public string sga
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablesga.sgaColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablesga.sgaColumn] = value;
                }
            }

            public string data_richiesta
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablesga.data_richiestaColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablesga.data_richiestaColumn] = value;
                }
            }

            public string edificio
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablesga.edificioColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablesga.edificioColumn] = value;
                }
            }

            public string piano
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablesga.pianoColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablesga.pianoColumn] = value;
                }
            }

            public string stanza
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablesga.stanzaColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablesga.stanzaColumn] = value;
                }
            }

            public string servizio
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablesga.servizioColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablesga.servizioColumn] = value;
                }
            }

            public string richiedente
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablesga.richiedenteColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablesga.richiedenteColumn] = value;
                }
            }

            public string tipomanutenzione
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablesga.tipomanutenzioneColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablesga.tipomanutenzioneColumn] = value;
                }
            }

            public string urgenza
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablesga.urgenzaColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablesga.urgenzaColumn] = value;
                }
            }

            public string stato_rdl
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablesga.stato_rdlColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablesga.stato_rdlColumn] = value;
                }
            }

            public string descrizione_problema
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablesga.descrizione_problemaColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablesga.descrizione_problemaColumn] = value;
                }
            }

            public bool IsrdlNull()
            {
                return this.IsNull(this.tablesga.rdlColumn);
            }

            public void SetrdlNull()
            {
                this[this.tablesga.rdlColumn] = System.Convert.DBNull;
            }

            public bool IssgaNull()
            {
                return this.IsNull(this.tablesga.sgaColumn);
            }

            public void SetsgaNull()
            {
                this[this.tablesga.sgaColumn] = System.Convert.DBNull;
            }

            public bool Isdata_richiestaNull()
            {
                return this.IsNull(this.tablesga.data_richiestaColumn);
            }

            public void Setdata_richiestaNull()
            {
                this[this.tablesga.data_richiestaColumn] = System.Convert.DBNull;
            }

            public bool IsedificioNull()
            {
                return this.IsNull(this.tablesga.edificioColumn);
            }

            public void SetedificioNull()
            {
                this[this.tablesga.edificioColumn] = System.Convert.DBNull;
            }

            public bool IspianoNull()
            {
                return this.IsNull(this.tablesga.pianoColumn);
            }

            public void SetpianoNull()
            {
                this[this.tablesga.pianoColumn] = System.Convert.DBNull;
            }

            public bool IsstanzaNull()
            {
                return this.IsNull(this.tablesga.stanzaColumn);
            }

            public void SetstanzaNull()
            {
                this[this.tablesga.stanzaColumn] = System.Convert.DBNull;
            }

            public bool IsservizioNull()
            {
                return this.IsNull(this.tablesga.servizioColumn);
            }

            public void SetservizioNull()
            {
                this[this.tablesga.servizioColumn] = System.Convert.DBNull;
            }

            public bool IsrichiedenteNull()
            {
                return this.IsNull(this.tablesga.richiedenteColumn);
            }

            public void SetrichiedenteNull()
            {
                this[this.tablesga.richiedenteColumn] = System.Convert.DBNull;
            }

            public bool IstipomanutenzioneNull()
            {
                return this.IsNull(this.tablesga.tipomanutenzioneColumn);
            }

            public void SettipomanutenzioneNull()
            {
                this[this.tablesga.tipomanutenzioneColumn] = System.Convert.DBNull;
            }

            public bool IsurgenzaNull()
            {
                return this.IsNull(this.tablesga.urgenzaColumn);
            }

            public void SeturgenzaNull()
            {
                this[this.tablesga.urgenzaColumn] = System.Convert.DBNull;
            }

            public bool Isstato_rdlNull()
            {
                return this.IsNull(this.tablesga.stato_rdlColumn);
            }

            public void Setstato_rdlNull()
            {
                this[this.tablesga.stato_rdlColumn] = System.Convert.DBNull;
            }

            public bool Isdescrizione_problemaNull()
            {
                return this.IsNull(this.tablesga.descrizione_problemaColumn);
            }

            public void Setdescrizione_problemaNull()
            {
                this[this.tablesga.descrizione_problemaColumn] = System.Convert.DBNull;
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        public class sgaRowChangeEvent : EventArgs
        {

            private sgaRow eventRow;

            private DataRowAction eventAction;

            public sgaRowChangeEvent(sgaRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            public sgaRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
    }
}
